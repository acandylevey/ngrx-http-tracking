import * as HttpTrackingActions from './http-tracking.actions';
import { createEntityAdapter } from '@ngrx/entity';
import { LoadingState } from '../model/loading-state';
import { createReducer, on } from '@ngrx/store';
export const HTTP_TRACKING_FEATURE_KEY = 'httpTracking';
export const httpTrackingAdapter = createEntityAdapter({
    selectId: (x) => x.action,
});
export const initialState = httpTrackingAdapter.getInitialState();
export const httpTrackingReducer = createReducer(initialState, on(HttpTrackingActions.trackHttpRequest, (state, { action, httpStatus, tags }) => httpTrackingAdapter.upsertOne({ action, httpStatus, tags }, state)), on(HttpTrackingActions.clearGloballyHandledErrors, (state) => {
    const actionsToUpdate = state.ids
        .map((id) => state.entities[id])
        .filter((httpTracking) => !!httpTracking &&
        httpTracking?.httpStatus?.message &&
        httpTracking.tags.includes('global'))
        .map((tracking) => ({
        ...tracking,
        httpStatus: LoadingState.INIT,
    }));
    return httpTrackingAdapter.upsertMany(actionsToUpdate, state);
}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cC10cmFja2luZy5yZWR1Y2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvaHR0cC10cmFja2luZy9zcmMvbGliLytzdGF0ZS9odHRwLXRyYWNraW5nLnJlZHVjZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxLQUFLLG1CQUFtQixNQUFNLHlCQUF5QixDQUFDO0FBQy9ELE9BQU8sRUFBRSxtQkFBbUIsRUFBOEIsTUFBTSxjQUFjLENBQUM7QUFFL0UsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ3RELE9BQU8sRUFBRSxhQUFhLEVBQUUsRUFBRSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBRWhELE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLGNBQWMsQ0FBQztBQUl4RCxNQUFNLENBQUMsTUFBTSxtQkFBbUIsR0FDOUIsbUJBQW1CLENBQXFCO0lBQ3RDLFFBQVEsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU07Q0FDMUIsQ0FBQyxDQUFDO0FBRUwsTUFBTSxDQUFDLE1BQU0sWUFBWSxHQUFVLG1CQUFtQixDQUFDLGVBQWUsRUFBRSxDQUFDO0FBRXpFLE1BQU0sQ0FBQyxNQUFNLG1CQUFtQixHQUFHLGFBQWEsQ0FDOUMsWUFBWSxFQUNaLEVBQUUsQ0FDQSxtQkFBbUIsQ0FBQyxnQkFBZ0IsRUFDcEMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsQ0FDdEMsbUJBQW1CLENBQUMsU0FBUyxDQUFDLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FDckUsRUFDRCxFQUFFLENBQUMsbUJBQW1CLENBQUMsMEJBQTBCLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRTtJQUMzRCxNQUFNLGVBQWUsR0FBYyxLQUFLLENBQUMsR0FBSTtTQUMxQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDL0IsTUFBTSxDQUNMLENBQUMsWUFBWSxFQUFFLEVBQUUsQ0FDZixDQUFDLENBQUMsWUFBWTtRQUNOLFlBQVksRUFBRSxVQUFXLEVBQUUsT0FBTztRQUMxQyxZQUFZLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FDdkM7U0FDQSxHQUFHLENBQ0YsQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUNYLENBQW9CO1FBQ2xCLEdBQUcsUUFBUTtRQUNYLFVBQVUsRUFBRSxZQUFZLENBQUMsSUFBSTtLQUM5QixDQUFBLENBQ0osQ0FBQztJQUNKLE9BQU8sbUJBQW1CLENBQUMsVUFBVSxDQUFDLGVBQWUsRUFBRSxLQUFLLENBQUMsQ0FBQztBQUNoRSxDQUFDLENBQUMsQ0FDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgSHR0cFRyYWNraW5nQWN0aW9ucyBmcm9tICcuL2h0dHAtdHJhY2tpbmcuYWN0aW9ucyc7XHJcbmltcG9ydCB7IGNyZWF0ZUVudGl0eUFkYXB0ZXIsIEVudGl0eUFkYXB0ZXIsIEVudGl0eVN0YXRlIH0gZnJvbSAnQG5ncngvZW50aXR5JztcclxuaW1wb3J0IHsgSHR0cFRyYWNraW5nRW50aXR5IH0gZnJvbSAnLi4vbW9kZWwvaHR0cC10cmFja2luZy1lbnRpdHknO1xyXG5pbXBvcnQgeyBMb2FkaW5nU3RhdGUgfSBmcm9tICcuLi9tb2RlbC9sb2FkaW5nLXN0YXRlJztcclxuaW1wb3J0IHsgY3JlYXRlUmVkdWNlciwgb24gfSBmcm9tICdAbmdyeC9zdG9yZSc7XHJcblxyXG5leHBvcnQgY29uc3QgSFRUUF9UUkFDS0lOR19GRUFUVVJFX0tFWSA9ICdodHRwVHJhY2tpbmcnO1xyXG5cclxuZXhwb3J0IHR5cGUgU3RhdGUgPSBFbnRpdHlTdGF0ZTxIdHRwVHJhY2tpbmdFbnRpdHk+O1xyXG5cclxuZXhwb3J0IGNvbnN0IGh0dHBUcmFja2luZ0FkYXB0ZXI6IEVudGl0eUFkYXB0ZXI8SHR0cFRyYWNraW5nRW50aXR5PiA9XHJcbiAgY3JlYXRlRW50aXR5QWRhcHRlcjxIdHRwVHJhY2tpbmdFbnRpdHk+KHtcclxuICAgIHNlbGVjdElkOiAoeCkgPT4geC5hY3Rpb24sXHJcbiAgfSk7XHJcblxyXG5leHBvcnQgY29uc3QgaW5pdGlhbFN0YXRlOiBTdGF0ZSA9IGh0dHBUcmFja2luZ0FkYXB0ZXIuZ2V0SW5pdGlhbFN0YXRlKCk7XHJcblxyXG5leHBvcnQgY29uc3QgaHR0cFRyYWNraW5nUmVkdWNlciA9IGNyZWF0ZVJlZHVjZXIoXHJcbiAgaW5pdGlhbFN0YXRlLFxyXG4gIG9uKFxyXG4gICAgSHR0cFRyYWNraW5nQWN0aW9ucy50cmFja0h0dHBSZXF1ZXN0LFxyXG4gICAgKHN0YXRlLCB7IGFjdGlvbiwgaHR0cFN0YXR1cywgdGFncyB9KSA9PlxyXG4gICAgICBodHRwVHJhY2tpbmdBZGFwdGVyLnVwc2VydE9uZSh7IGFjdGlvbiwgaHR0cFN0YXR1cywgdGFncyB9LCBzdGF0ZSlcclxuICApLFxyXG4gIG9uKEh0dHBUcmFja2luZ0FjdGlvbnMuY2xlYXJHbG9iYWxseUhhbmRsZWRFcnJvcnMsIChzdGF0ZSkgPT4ge1xyXG4gICAgY29uc3QgYWN0aW9uc1RvVXBkYXRlID0gKDxzdHJpbmdbXT5zdGF0ZS5pZHMpXHJcbiAgICAgIC5tYXAoKGlkKSA9PiBzdGF0ZS5lbnRpdGllc1tpZF0pXHJcbiAgICAgIC5maWx0ZXIoXHJcbiAgICAgICAgKGh0dHBUcmFja2luZykgPT5cclxuICAgICAgICAgICEhaHR0cFRyYWNraW5nICYmXHJcbiAgICAgICAgICAoPEVycm9yPmh0dHBUcmFja2luZz8uaHR0cFN0YXR1cyk/Lm1lc3NhZ2UgJiZcclxuICAgICAgICAgIGh0dHBUcmFja2luZy50YWdzLmluY2x1ZGVzKCdnbG9iYWwnKVxyXG4gICAgICApXHJcbiAgICAgIC5tYXAoXHJcbiAgICAgICAgKHRyYWNraW5nKSA9PlxyXG4gICAgICAgICAgPEh0dHBUcmFja2luZ0VudGl0eT57XHJcbiAgICAgICAgICAgIC4uLnRyYWNraW5nLFxyXG4gICAgICAgICAgICBodHRwU3RhdHVzOiBMb2FkaW5nU3RhdGUuSU5JVCxcclxuICAgICAgICAgIH1cclxuICAgICAgKTtcclxuICAgIHJldHVybiBodHRwVHJhY2tpbmdBZGFwdGVyLnVwc2VydE1hbnkoYWN0aW9uc1RvVXBkYXRlLCBzdGF0ZSk7XHJcbiAgfSlcclxuKTtcclxuIl19