import { createEffect, ofType } from '@ngrx/effects';
import { props } from '@ngrx/store';
import { of, Subject } from 'rxjs';
import { catchError, map, switchMap, tap } from 'rxjs/operators';
import { LoadingState } from '../model/loading-state';
import { convertResponseToError } from './convert-response-to-error';
function createTrackingAction(type, hasGlobalTag, tags, httpStatus, config) {
    if (typeof config === 'function') {
        return defineType(type, (...args) => ({
            ...config(...args),
            type,
            httpStatus,
            tags: hasGlobalTag ? ['global', ...tags] : [...tags],
        }));
    }
    const as = config ? config._as : 'empty';
    switch (as) {
        case 'empty':
            return defineType(type, () => ({
                type,
                httpStatus,
                tags: hasGlobalTag ? ['global', ...tags] : [...tags],
            }));
        case 'props':
            return defineType(type, 
            // eslint-disable-next-line @typescript-eslint/no-shadow
            (props) => ({
                ...props,
                type,
                httpStatus,
                tags: hasGlobalTag ? ['global', ...tags] : [...tags],
            }));
        default:
            throw new Error('Unexpected config.');
    }
}
function createTrackingFailureAction(type, hasGlobalTag, tags, httpStatus, config) {
    if (typeof config === 'function') {
        return defineType(type, (err, fallbackMsg, ...args) => ({
            httpStatus: httpStatus(err, fallbackMsg),
            ...config(...args),
            type,
            tags: hasGlobalTag ? ['global', ...tags] : [...tags],
        }));
    }
    const as = config ? config._as : 'empty';
    switch (as) {
        case 'empty':
            return defineType(type, (err, fallbackMsg) => ({
                httpStatus: httpStatus(err, fallbackMsg),
                type,
                tags: hasGlobalTag ? ['global', ...tags] : [...tags],
            }));
        case 'props':
            return defineType(type, 
            // eslint-disable-next-line @typescript-eslint/no-shadow
            (err, fallbackMsg, props) => ({
                httpStatus: httpStatus(err, fallbackMsg),
                ...props,
                type,
                tags: hasGlobalTag ? ['global', ...tags] : [...tags],
            }));
        default:
            throw new Error('Unexpected config.');
    }
}
function defineType(type, creator) {
    return Object.defineProperty(creator, 'type', {
        value: type,
        writable: false,
    });
}
export const createTrackingActions = (namespace, actionName, hasGlobalTag = true, tags = [namespace]) => ({
    loading: createTrackingAction(`[${namespace}] ${actionName}`, hasGlobalTag, tags, LoadingState.LOADING, props()),
    loaded: createTrackingAction(`[${namespace}] ${actionName}Success`, hasGlobalTag, tags, LoadingState.LOADED, props()),
    failure: createTrackingFailureAction(`[${namespace}] ${actionName}Failure`, hasGlobalTag, tags, convertResponseToError),
});
export const createTrackingEffect = (actions$, tackingAction, serviceCall, fallbackErrorMsg, 
// eslint-disable-next-line @typescript-eslint/no-empty-function
successFn = (httpContext) => { }) => createEffect(() => actions$.pipe(ofType(tackingAction.loading), switchMap((action) => serviceCall(action.request).pipe(map((payload) => tackingAction.loaded({ payload })), tap((successAction) => successFn({
    request: action.request,
    payload: successAction.payload,
})), catchError((e) => {
    console.error(e);
    const subjectMsg = new Subject();
    if (e.error instanceof Blob &&
        e.error.type === 'application/json') {
        e.error.text().then((errorBlobText) => {
            const errorJson = JSON.parse(errorBlobText);
            subjectMsg.next(tackingAction.failure(e, errorJson.error));
        });
    }
    else {
        return of(tackingAction.failure(e, fallbackErrorMsg));
    }
    return subjectMsg;
})))));
//# sourceMappingURL=data:application/json;base64,