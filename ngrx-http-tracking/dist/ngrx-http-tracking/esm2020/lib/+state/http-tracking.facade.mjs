import * as HttpTrackingActions from './http-tracking.actions';
import * as HttpTrackingSelectors from './http-tracking.selectors';
import { debounceTime, filter, map, take } from 'rxjs/operators';
import { Injectable } from '@angular/core';
import { forkJoin } from 'rxjs';
import { isError } from '../function/is-error';
import { mapActionTypeToId } from '../function/map-action-typ-to-id';
import { LoadingState } from '../model/loading-state';
import * as i0 from "@angular/core";
import * as i1 from "@ngrx/store";
export class HttpTrackingFacade {
    constructor(store) {
        this.store = store;
    }
    getTracking(action) {
        return this.store.select(HttpTrackingSelectors.selectOneHttpTracking(mapActionTypeToId(action.type)));
    }
    isLoading(action) {
        return this.getTracking(action).pipe(map((x) => x?.httpStatus === LoadingState.LOADING));
    }
    isLoaded(action) {
        return this.getTracking(action).pipe(map((x) => x?.httpStatus === LoadingState.LOADED));
    }
    isInit(action) {
        return this.getTracking(action).pipe(map((x) => !x || x.httpStatus === LoadingState.INIT));
    }
    getError(action) {
        return this.getTracking(action).pipe(filter((x) => isError(x?.httpStatus)), map((x) => (x?.httpStatus).message));
    }
    isTagLoading(tag) {
        return this.store
            .select(HttpTrackingSelectors.selectLoadingByTag(tag))
            .pipe(debounceTime(100));
    }
    getTagErrors(tag) {
        return this.store
            .select(HttpTrackingSelectors.selectErrorsByTag(tag))
            .pipe(debounceTime(100));
    }
    clearGloballyHandledErrors() {
        this.store.dispatch(HttpTrackingActions.clearGloballyHandledErrors());
    }
    clearTrackingMulti(actions) {
        actions.forEach((action) => {
            this.store.dispatch(HttpTrackingActions.trackHttpRequest({
                action: mapActionTypeToId(action.type),
                httpStatus: LoadingState.INIT,
                tags: action['tags'],
            }));
        });
    }
    getGlobalLoading() {
        return this.store
            .select(HttpTrackingSelectors.selectLoadingByTag('global'))
            .pipe(debounceTime(300));
    }
    getGlobalErrors() {
        return this.store
            .select(HttpTrackingSelectors.selectErrorsByTag('global'))
            .pipe(debounceTime(300));
    }
    getResolved(action) {
        return this.getTracking(action.loading).pipe(filter((tracking) => !!tracking), map((tracking) => tracking.httpStatus), filter((httpStatus) => httpStatus === LoadingState.LOADED || isError(httpStatus)), take(1), map((httpStatus) => {
            const retVal = {
                action,
                success: httpStatus === LoadingState.LOADED,
            };
            if (isError(httpStatus)) {
                retVal.error = httpStatus;
            }
            return retVal;
        }));
    }
    getMultiResolved(actions) {
        const results = actions.map((a) => this.getResolved(a));
        return forkJoin(results);
    }
}
HttpTrackingFacade.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.3", ngImport: i0, type: HttpTrackingFacade, deps: [{ token: i1.Store }], target: i0.ɵɵFactoryTarget.Injectable });
HttpTrackingFacade.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.1.3", ngImport: i0, type: HttpTrackingFacade });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.3", ngImport: i0, type: HttpTrackingFacade, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.Store }]; } });
//# sourceMappingURL=data:application/json;base64,